# Generated by CodiumAI

from homework import sort_list_imperative, sort_list_declarative



class TestSortList:

    #  The function sorts a list of integers in ascending order.
    def test_sort_list_ascending_order(self):
        # Arrange
        numbers = [4, 2, 1, 3]

        # Act
        result = sort_list_imperative(numbers)

        # Assert
        assert result == [1, 2, 3, 4]

    #  The function returns the sorted list.
    def test_sort_list_returns_sorted_list(self):
        # Arrange
        numbers = [4, 2, 1, 3]

        # Act
        result = sort_list_imperative(numbers)

        # Assert
        assert result == [1, 2, 3, 4]

    #  The function works correctly with a list of length 0.
    def test_sort_list_empty_list(self):
        # Arrange
        numbers = []

        # Act
        result = sort_list_imperative(numbers)

        # Assert
        assert result == []

    #  The function works correctly with a list containing the maximum allowed integer value.
    def test_sort_list_max_integer(self):
        # Arrange
        numbers = [4, 2, 1, 3, 2147483647]

        # Act
        result = sort_list_imperative(numbers)

        # Assert
        assert result == [1, 2, 3, 4, 2147483647]

    #  The function works correctly with a list containing the minimum allowed integer value.
    def test_sort_list_min_integer(self):
        # Arrange
        numbers = [4, 2, 1, 3, -2147483648]

        # Act
        result = sort_list_imperative(numbers)

        # Assert
        assert result == [-2147483648, 1, 2, 3, 4]

    #  The function works correctly with a list containing both the maximum and minimum allowed integer values.
    def test_sort_list_min_max_integer(self):
        # Arrange
        numbers = [4, 2, 1, 3, -2147483648, 2147483647]

        # Act
        result = sort_list_imperative(numbers)

        # Assert
        assert result == [-2147483648, 1, 2, 3, 4, 2147483647]

    def test_returns_sorted_list_of_integers(self):
        numbers = [4, 2, 1, 3]
        expected_result = [1, 2, 3, 4]
        assert sort_list_declarative(numbers) == expected_result
